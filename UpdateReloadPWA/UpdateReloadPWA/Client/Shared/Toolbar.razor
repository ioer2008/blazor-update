@using System.Timers;
@inject HttpClient Http
@inject IJSRuntime JSRuntime

@if (NewVersionAvailable)
{
    <span>New version available.&nbsp;</span>
    <button @onclick="Update">Update</button>
}
else if (ServerVersion != ClientVersion)
{
    <p>Please re-open the app to complete the update.</p>
}

@code
{
    [CascadingParameter]
    public CascadingAppStateProvider StateProvider { get; set; }

    string ClientVersion = "1.0";
    string ServerVersion = "";
    bool NewVersionAvailable = false;
    Timer VersionCheckTimer;

    async Task Update()
    {
        await StateProvider.SaveChangesAsync();
        await JSRuntime.InvokeVoidAsync("Update");
    }

    async Task GetVersion()
    {
        try
        {
            // try/catch because we could be offline.
            var curVersion = await Http.GetStringAsync("GetVersion");
            if (curVersion != ServerVersion)
            {
                NewVersionAvailable = true;
                await InvokeAsync(StateHasChanged);
            }
        }
        catch { }
    }

    void TimerElapsed(object sender, EventArgs e)
    {
        Task.Run(async () => await GetVersion());
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // try/catch because we could be offline.
            ServerVersion = await Http.GetStringAsync("GetVersion");
        }
        catch { }
        VersionCheckTimer = new Timer(5000);
        VersionCheckTimer.Elapsed += TimerElapsed;
        VersionCheckTimer.Start();
    }
}